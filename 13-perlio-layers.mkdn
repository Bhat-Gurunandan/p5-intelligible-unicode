# PerlIO layers

Perl provides facilities to read from (or write to) files, while respectively
decoding or encoding the data.

## The `:utf8` PerlIO layer

To decode UTF-8 characters read from a file, you can use the 3-argument open
syntax and specify the `:utf8` PerlIO layer after the mode character:

    open my $fh, "<:utf8", $file or die $!;

This is the same thing that the `-CI` command-line flag does on the standard
input, as you can check like this:

    $ perl -E 'say for PerlIO::get_layers(STDIN)'
    unix
    perlio
    $ perl -CI -E 'say for PerlIO::get_layers(STDIN)'
    unix
    perlio
    utf8

Likewise, on outputs, the right form of open would be:

    open my $fh, ">:utf8", $file or die $!;

and that would be equivalent to `-CO` on standard output, or `-CE`
on standard error. (`-CS` is just shorthand for all three, `-CIOE`.)

## The `:encoding(UTF-8)` PerlIO layer

However, the `:utf8` layer is very low-level and performs very little
validation. It does not provide either any way to tune what to do on errors.
The [PerlIO::encoding](https://metacpan.org/pod/PerlIO::encoding) layer, which
is actually based on the `Encode` module, performs the same checks and
fallbacks as `Encode` and is much more recommended.

## Manipulating layers: `binmode`

The binmode() built-in function can be used to add PerlIO layers to any
filehandle. For example, if you want to read and validate UTF-8 from the
standard input:

    binmode STDIN, ':encoding(UTF-8)';

## Specifying default layers: `use open`

The [`open`](https://metacpan.org/pod/open) pragma is used to specify default
PerlIO layers for input and output files. Due to its global nature, its
utility is marginal.

## Reading from scalars

The special layer [PerlIO::scalar](https://metacpan.org/pod/PerlIO::scalar)
allows to read from in-memory scalar strings, instead of files. As the
documentation states, *the scalar is considered a stream of bytes* (as if it
was external input, as from a regular file). As of perl 5.17.9, perl will fail
to read from strings that contain code points above 0xFF, and warn about that:

    $ perl -CS -wE 'open $fh,"<",\"oeuf" or die "Cannot open scalar: $!";say <$fh>'
    oeuf
    $ perl -CS -wE 'open $fh,"<",\"\x{0153}uf" or die "Cannot open scalar: $!";say <$fh>'
    Strings with code points over 0xFF may not be mapped into in-memory file handles
    Cannot open scalar: Invalid argument at -e line 1.

The solution is to do the decoding yourself:

    $ perl -CS -wE 'utf8::encode($x="\x{0153}uf");open $fh,"<",\$x;utf8::decode($y=<$fh>);say $y'
    Å“uf
