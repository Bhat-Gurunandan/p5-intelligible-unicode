# Perl strings

Perl strings can hold all Unicode characters (up to the maximum code
point U+10FFFF). Internally, Perl uses the variable-length
encoding [UTF-8](http://www.unicode.org/resources/utf8.html) to represent strings, due to its space efficiency,
and to the fact that it conveniently overlaps with ASCII up to character 127.

Strings coming from the outside of your program (file names, file
contents, command-line arguments, STDIN, etc.), and even the text of your
program itself, are always just streams of bytes (valued between 0 and
255), because that's just how programs communicate. This is why they
need to be decoded when they are expected to contain Unicode characters.
In Perl parlance, decoding is precisely the operation that converts a
stream of bytes to a stream of Unicode characters. There are various
ways to do this.

On the other hand, strings going to the outside of your program (file names,
file contents, STDERR, STDOUT, etc.) need to be encoded into bytes from the
expected encoding.

Unless a dedicated CPAN module is used, decoding of inputs and encoding of outputs
also needs to be enforced while dealing with database servers or serialization
formats (JSON, XML, YAML, etc.).

## String syntax

In Perl strings you can specify any code point by (hexadecimal) number by using
the `\x{...}` escape in double-quoted strings. The braces are not necessary if
the hexadecimal number is two digits long. So for example `"\x42"` is U+0042
LATIN CAPITAL LETTER B, and `"\x{442}"` is U+442 CYRILLIC SMALL LETTER TE.

The [charnames](https://metacpan.org/pod/charnames) pragma allows you to access
characters by name as well, so within the scope of `use charnames ':full'`
you can also write those characters as `"\N{LATIN CAPITAL LETTER B}"` and
`"\N{CYRILLIC SMALL LETTER TE}"`.
